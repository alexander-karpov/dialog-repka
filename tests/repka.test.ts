import { repka } from '../src/repka';
import { Dialog } from '../src/DialogBuilder/Dialog';
import { DialogResponse } from '../src/DialogBuilder/DialogResponse';

class DialogTestClosure<TState, TSceneId> {
    private state!: TState;

    constructor(private readonly dialog: Dialog<TState, TSceneId>) {}

    async next(command: string): Promise<string> {
        return (await this.handleRequest(command)).response.text;
    }

    async nextTts(command: string): Promise<string | undefined> {
        return (await this.handleRequest(command)).response.tts;
    }

    private async handleRequest(command: string): Promise<DialogResponse> {
        const response = await this.dialog.handleRequest({
            meta: {
                locale: 'ru-RU',
                timezone: 'Europe/Moscow',
            },
            request: {
                command: command,
                original_utterance: command,
                markup: {
                    dangerous_context: false,
                },
                nlu: {
                    tokens: command.split(' '),
                    intents: {},
                },
            },
            state: {
                session: this.state || {},
            },
            session: {
                new: false,
                message_id: 1,
                session_id: '2eac4854-fce721f3-b845abba-20d60',
                skill_id: '3ad36498-f5rd-4079-a14b-788652932056',
                application: {
                    application_id:
                        'AC9WC3DF6FCE052E45A4566A48E6B7193774B84814CE49A922E163B8B29881DC',
                },
            },
            version: '1.0',
        });

        this.state = <TState>response.session_state;

        return response;
    }
}

test('–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Å–∫–∞–∑–∫–∞: –Ω–∞—á–∞–ª–æ', async () => {
    const closure = new DialogTestClosure(repka);

    expect(await closure.next('')).toMatch(/–ø–æ—Å–∞–¥–∏–ª –¥–µ–¥ —Ä–µ–ø–∫—É/i);
});

test('–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Å–∫–∞–∑–∫–∞: –∏—Å—Ç–æ—Ä–∏—è', async () => {
    const closure = new DialogTestClosure(repka);

    await closure.next('');
    await closure.next('–ë–∞–±–∫—É');
    await closure.next('–í–Ω—É—á–∫—É');
    await closure.next('–ñ—É—á–∫—É');

    const tale = await closure.next('–ö–æ—à–∫—É');

    expect(tale).toMatch('–ö–æ—à–∫–∞ üê± –∑–∞ –∂—É—á–∫—É, –∂—É—á–∫–∞ üê∂ –∑–∞ –≤–Ω—É—á–∫—É, –≤–Ω—É—á–∫–∞ üëß –∑–∞ –±–∞–±–∫—É,');
    expect(tale).toMatch(
        '–±–∞–±–∫–∞ üëµ –∑–∞ –¥–µ–¥–∫—É, –¥–µ–¥–∫–∞ üë¥ –∑–∞ —Ä–µ–ø–∫—É. –¢—è–Ω—É—Ç-–ø–æ—Ç—è–Ω—É—Ç ‚Äî –≤—ã—Ç—è–Ω—É—Ç—å –Ω–µ –º–æ–≥—É—Ç.'
    );
});

test('–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Å–∫–∞–∑–∫–∞: –∫–æ–Ω–µ—Ü [–ø–æ–∑–≤–∞–ª–∏ –º—ã—à–∫—É]', async () => {
    const closure = new DialogTestClosure(repka);

    await closure.next('');
    await closure.next('–ë–∞–±–∫—É');
    const tale = await closure.next('–ú—ã—à–∫—É');

    expect(tale).toMatch(
        '–ú—ã—à–∫–∞ üê≠ –∑–∞ –±–∞–±–∫—É, –±–∞–±–∫–∞ üëµ –∑–∞ –¥–µ–¥–∫—É, –¥–µ–¥–∫–∞ üë¥ –∑–∞ —Ä–µ–ø–∫—É. –¢—è–Ω—É—Ç-–ø–æ—Ç—è–Ω—É—Ç üéâ –≤—ã—Ç—è–Ω—É–ª–∏ —Ä–µ–ø–∫—É!'
    );
});

test('–ú—É–∂—Å–∫–æ–π —Ä–æ–¥ –∑–æ–≤–µ—Ç –Ω–∞ –ø–æ–º–æ—â—å', async () => {
    const closure = new DialogTestClosure(repka);

    await closure.next('');
    expect(await closure.next('–î—Ä–∞–∫–æ–Ω–∞')).toMatch('–ö–æ–≥–æ –ø–æ–∑–≤–∞–ª –¥—Ä–∞–∫–æ–Ω');
});

test('–ñ–µ–Ω—Å–∫–∏–π —Ä–æ–¥ –∑–æ–≤–µ—Ç –Ω–∞ –ø–æ–º–æ—â—å', async () => {
    const closure = new DialogTestClosure(repka);

    await closure.next('');
    expect(await closure.next('–ë–∞–±–∫—É')).toMatch('–ö–æ–≥–æ –ø–æ–∑–≤–∞–ª–∞ –±–∞–±–∫–∞');
});

test('–°—Ä–µ–¥–Ω–∏–π —Ä–æ–¥ –∑–æ–≤–µ—Ç –Ω–∞ –ø–æ–º–æ—â—å', async () => {
    const closure = new DialogTestClosure(repka);

    await closure.next('');
    expect(await closure.next('–ß—É–¥–∏—â–µ')).toMatch('–ö–æ–≥–æ –ø–æ–∑–≤–∞–ª–æ —á—É–¥–∏—â–µ');
});

test('–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ –≥–µ—Ä–æ—è –≤ —Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ', async () => {
    const closure = new DialogTestClosure(repka);

    await closure.next('');
    expect(await closure.next('–ë—É—Ç—ã–ª–∫–∞ —Å—Ç–æ–ª–∞ –¥—Ä–∞–∫–æ–Ω–∞')).toMatch('–î—Ä–∞–∫–æ–Ω üêâ –∑–∞ –¥–µ–¥–∫—É');
});

test('–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –æ–¥—É—à–µ–≤–ª–µ–Ω–Ω—ã–º', async () => {
    const closure = new DialogTestClosure(repka);

    await closure.next('');
    expect(await closure.next('–°–µ—Ä—ë–∂–∫—É')).toMatch('–ö–æ–≥–æ –ø–æ–∑–≤–∞–ª —Å–µ—Ä–µ–∂–∫–∞');
});

test('–ü—Ä–∞–≤–∏–ª—å–Ω–æ —Å–∫–ª–æ–Ω—è–µ—Ç —Ñ—Ä–∞–∑—É –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–Ω–∏—è –≥–µ—Ä–æ—è', async () => {
    const closure = new DialogTestClosure(repka);

    await closure.next('');
    await closure.next('–≤–Ω—É–∫–∞');
    expect(await closure.next('—Ä–∞–∫–µ—Ç–∞')).toMatch('–ö–æ–≥–æ –ø–æ–∑–≤–∞–ª –≤–Ω—É–∫');

    await closure.next('–ë–∞–±–∫—É');
    expect(await closure.next('—Ä–∞–∫–µ—Ç–∞')).toMatch('–ö–æ–≥–æ –ø–æ–∑–≤–∞–ª–∞ –±–∞–±–∫–∞');

    await closure.next('—á—É–¥–∏—â–µ');
    expect(await closure.next('—Ä–∞–∫–µ—Ç–∞')).toMatch('–ö–æ–≥–æ –ø–æ–∑–≤–∞–ª–æ —á—É–¥–∏—â–µ');
});

test('–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ', async () => {
    const closure = new DialogTestClosure(repka);

    await closure.next('');
    expect(await closure.next('—á–µ–ª–æ–≤–µ–∫')).toMatch('–ß–µ–ª–æ–≤–µ–∫ –∑–∞ –¥–µ–¥–∫—É');
    expect(await closure.next('–±–æ–≥–∞—Ç—ã—Ä—å')).toMatch('–ë–æ–≥–∞—Ç—ã—Ä—å –∑–∞ —á–µ–ª–æ–≤–µ–∫–∞');
    expect(await closure.next('–í–Ω—É—á–æ–∫')).toMatch('–í–Ω—É—á–æ–∫ –∑–∞ –±–æ–≥–∞—Ç—ã—Ä—è');
    expect(await closure.next('–¶–∞—Ä–∏—Ü–∞')).toMatch('–¶–∞—Ä–∏—Ü–∞ –∑–∞ –≤–Ω—É—á–∫–∞');
    expect(await closure.next('–õ–µ–±–µ–¥—å')).toMatch('–õ–µ–±–µ–¥—å ü¶¢ –∑–∞ —Ü–∞—Ä–∏—Ü—É');
    // –õ–µ–±–µ–¥—å - —Ñ–∞–º–∏–ª–∏—è
    // expect(await closure.handleCommand('–í—Ä–∞—á')).toMatch('–í—Ä–∞—á –∑–∞ –õ–µ–±–µ–¥—å');
});

test('–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤–∏–Ω. –ø–∞–¥–µ–∂—É', async () => {
    const closure = new DialogTestClosure(repka);

    await closure.next('');
    expect(await closure.next('–¢—ã—Ä—ã—à–∫–∏–Ω–∞')).toMatch('–¢—ã—Ä—ã—à–∫–∏–Ω –∑–∞ –¥–µ–¥–∫—É');
});

test('–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—Ä–∞–∑–∞ –¥–ª—è —Ä—ã–±–∫–∏', async () => {
    const closure = new DialogTestClosure(repka);

    await closure.next('');
    expect(await closure.nextTts('–∑–æ–ª–æ—Ç—É—é —Ä—ã–±–∫—É')).toMatch(
        /–∫–ª–∏–∫–∞—Ç—å –∑–æ–ª–æ—Ç—É—é —Ä—ã–±–∫—É.*–ø—Ä–∏–ø–ª—ã–ª–∞ –∫ –Ω–µ–º—É —Ä—ã–±–∫–∞, —Å–ø—Ä–æ—Å–∏–ª–∞/
    );

    await closure.next('–∫–æ—à–∫—É');
    expect(await closure.next('—Ä—ã–±–∫—É')).toMatch('—Å—Ç–∞–ª–∞ –æ–Ω–∞ –∫–ª–∏–∫–∞—Ç—å');
});

test('–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—Ä–∞–∑–∞ –¥–ª—è –∫–æ—à–µ–∫', async () => {
    const closure = new DialogTestClosure(repka);

    await closure.next('');
    expect(await closure.nextTts('—á–µ—Ä–Ω—É—é –∫–æ—à–∫—É')).toMatch(/–ü—Ä–∏–±–µ–∂–∞–ª–∞ —á–µ—Ä–Ω–∞—è –∫–æ—à–∫–∞.*–≤—Ü–µ–ø–∏–ª–∞—Å—å –≤ –¥–µ–¥–∫—É/);
    expect(await closure.nextTts('–∫–æ—Ç –º–∞—Ä—Ç–æ—Å–∫–∏–Ω')).toMatch(/–ü—Ä–∏–±–µ–∂–∞–ª –∫–æ—Ç.*–≤—Ü–µ–ø–∏–ª—Å—è –≤/);
});

test('–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—Ä–∞–∑–∞ –¥–ª—è –º—É—Ä–∫–∏', async () => {
    const closure = new DialogTestClosure(repka);

    await closure.next('');
    expect(await closure.nextTts('–º—É—Ä–∫—É')).toMatch(/–ü—Ä–∏–±–µ–∂–∞–ª–∞ –∫–æ—à–∫–∞ –º—É—Ä–∫–∞/);
});
