import { RepkaSceneName } from '../RepkaSceneName';
import { emoji } from '../emoji';
import { upperFirst } from '../../upperFirst';
import { Character } from '../Character';
import { knownChars } from '../knownChars';
import { RepkaTransition } from '../RepkaTransition';
import { replyRandomSound } from '../replies/replyRandomSound';
import { RepkaTaleChainLink } from '../RepkaTaleChainLink';

function maxLen(text: [string, string]) {
    return Math.max(text[0].length, text[1].length);
}

export const TaleChain: RepkaTransition = {
    reply(reply, model) {
        const lastCalledChar = model.lastCalledCharacter();
        const knownChar = knownChars.find((char) => char.trigger(lastCalledChar));

        if (!knownChar?.phrase) {
            reply.withText([
                `${Character.byNumber(lastCalledChar, '–Ø', '–ú—ã')} ${Character.nominative(
                    lastCalledChar
                )}.`,
                `${Character.byNumber(lastCalledChar, '–Ø', '–ú—ã')} ${Character.nominativeTts(
                    lastCalledChar
                )}.`,
            ]);
        }

        if (knownChar) {
            replyRandomSound(reply, knownChar);

            if (knownChar.image) {
                reply.withImage(knownChar.image);
            }
        }

        if (knownChar?.phrase) {
            knownChar?.phrase(reply, model);
        } else {
            reply.selectRandom(
                (phrase) => {
                    reply.withText(phrase);
                    model.setLastCharacterPhrase(phrase);
                },
                Character.byNumber(
                    lastCalledChar,
                    ['–ü–æ–º–æ–≥—É –≤–∞–º.', '–ë—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å.', '–ü–æ–º–æ–≥—É –≤—ã—Ç—è–Ω—É—Ç—å —Ä–µ–ø–∫—É.'],
                    ['–ü–æ–º–æ–∂–µ–º –≤–∞–º.', '–ë—É–¥–µ–º –ø–æ–º–æ–≥–∞—Ç—å.', '–ü–æ–º–æ–∂–µ–º –≤—ã—Ç—è–Ω—É—Ç—å —Ä–µ–ø–∫—É.']
                ),
                1,
                (phrase) => !model.isLastCharacterPhrase(phrase)
            );
        }

        /**
         * –¶–µ–ø–æ—á–∫–∞
         */
        const lastLink: [string, string] = [`, –¥–µ–¥–∫–∞ üë¥ –∑–∞ —Ä–µ–ø–∫—É.`, ' - –¥–µ–¥–∫–∞ –∑–∞ —Ä–µ–ø–∫—É.'];
        const end: [string, string] = model.isTaleEnd()
            ? [
                  '–¢—è–Ω—É—Ç-–ø–æ—Ç—è–Ω—É—Ç ‚Äì üéâ ‚Äì –≤—ã—Ç—è–Ω—É–ª–∏ —Ä–µ–ø–∫—É!',
                  '–¢—è–Ω—É—Ç-–ø–æ—Ç—è–Ω—É—Ç <speaker audio="alice-sounds-human-kids-1.opus"> - –≤—ã—Ç—è–Ω—É–ª–∏ —Ä–µ–ø–∫—É!',
              ]
            : [`–¢—è–Ω—É—Ç-–ø–æ—Ç—è–Ω—É—Ç ‚Äî –≤—ã—Ç—è–Ω—É—Ç—å –Ω–µ –º–æ–≥—É—Ç.`, `–¢—è–Ω—É—Ç-–ø–æ—Ç—è–Ω—É—Ç ‚Äî –≤—ã—Ç—è–Ω—É—Ç—å –Ω–µ –º–æ–≥—É—Ç.`];

        let charsLeft = 850 - maxLen(lastLink) - maxLen(end);

        const links = model.pairs().map((pair) => new RepkaTaleChainLink(pair[1], pair[0]));

        const text: string[] = [];
        const tts: string[] = [];

        for (let link of links) {
            text.push(link.versions.full[0]);
            tts.push(link.versions.full[1]);
        }

        charsLeft -= Math.max(
            text.reduce((len, t) => len + t.length, 0),
            tts.reduce((len, t) => len + t.length, 0)
        );

        for (let i = 0; i < links.length - 1 && charsLeft < 0; i++) {
            const link = links[i] as RepkaTaleChainLink;

            text[i] = link.versions.short[0];
            tts[i] = link.versions.short[1];

            charsLeft += maxLen(link.versions.full) - maxLen(link.versions.short);
        }

        for (let i = 0; i < links.length - 1 && charsLeft < 0; i++) {
            const link = links[i] as RepkaTaleChainLink;

            text[i] = link.versions.shortest[0];
            tts[i] = link.versions.shortest[1];

            charsLeft += maxLen(link.versions.short) - maxLen(link.versions.shortest);
        }

        text.reverse();
        tts.reverse();

        reply.withText([upperFirst(text.join(', ')), joinCharactersPairsTts(tts)], lastLink);

        /**
         * –¢—è–Ω—É—Ç-–ø–æ—Ç—è–Ω—É—Ç
         */
        reply.withText(end);
    },

    onTransition(model) {
        if (model.isTaleEnd()) {
            return RepkaSceneName.TaleEnd;
        }

        return RepkaSceneName.Call–°haracter;
    },
};

/**
 * –ü—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–ª–∏–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏, –Ω—É–∂–Ω–æ
 * –∏–Ω–æ–≥–¥–∞ —Å—Ç–∞–≤–∏—Ç—å —Ç–æ—á–∫–∏ –≤ tts, –∏–Ω–∞—á–µ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç
 * —É–∂–∞—Å–Ω—ã–π –¥–µ—Ñ–µ–∫—Ç —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏.
 * @param pairs –∫—Ç–æ –∑–∞ –∫–æ–≥–æ
 */
function joinCharactersPairsTts(pairs: string[]) {
    const result = [];
    const SEPARATED_PAIRS = 4;

    for (let i = 0; i < pairs.length; i++) {
        const separator = i > 0 && (i % SEPARATED_PAIRS) - 3 === 0 ? '. ' : ' - ';

        result.push(pairs[i], separator);
    }

    result.pop();

    return result.join('');
}
