import { RepkaTransitionBuilder } from '../RepkaTransitionBuilder';
import { RepkaScene } from '../RepkaScene';
import { emoji } from '../emoji';
import { upperFirst } from '../../upperFirst';
import { Character } from '../Character';
import { RepkaState } from '../RepkaState';
import * as intents from '../intents';
import { knownChars } from '../knownChars';
import { replyWithKnownChar } from '../replies/replyWithKnownChar';

export function configureTaleChain(scene: RepkaTransitionBuilder) {
    scene.withReply((reply, state) => {
        /**
         * –ò–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂
         */
        const knownChar = knownChars.find((char) => char.trigger(state.lastCalledChar));

        if (knownChar) {
            replyWithKnownChar(reply, state, knownChar);
        }

        /**
         * –¶–µ–ø–æ—á–∫–∞
         */
        const text: string[] = [];
        const tts: string[] = [];

        for (let i = 0; i < state.characters.length - 1; i++) {
            const sub = state.characters[i + 1];
            const obj = state.characters[i];
            const em = emoji[Character.nominative(sub)] || emoji[sub.normal];
            const emojiPart = em ? ` ${em}` : '';

            text.push(`${Character.nominative(sub)}${emojiPart} –∑–∞ ${Character.accusative(obj)}`);
            tts.push(`${Character.nominativeTts(sub)} –∑–∞ ${Character.accusativeTts(obj)}`);
        }

        text.reverse();
        tts.reverse();

        reply.withText(
            [upperFirst(text.join(', ')), tts.join(' - ')],
            [`, –¥–µ–¥–∫–∞ üë¥ –∑–∞ —Ä–µ–ø–∫—É.`, ' - –¥–µ–¥–∫–∞ –∑–∞ —Ä–µ–ø–∫—É.']
        );

        /**
         * –¢—è–Ω—É—Ç-–ø–æ—Ç—è–Ω—É—Ç
         */
        if (isTaleEnd(state)) {
            reply.withText([
                '–¢—è–Ω—É—Ç-–ø–æ—Ç—è–Ω—É—Ç üéâ –≤—ã—Ç—è–Ω—É–ª–∏ —Ä–µ–ø–∫—É!',
                '–¢—è–Ω—É—Ç-–ø–æ—Ç—è–Ω—É—Ç <speaker audio="alice-sounds-human-kids-1.opus"> - –≤—ã—Ç—è–Ω—É–ª–∏ —Ä–µ–ø–∫—É!',
            ]);
        } else {
            reply.withText(`–¢—è–Ω—É—Ç-–ø–æ—Ç—è–Ω—É—Ç ‚Äî –≤—ã—Ç—è–Ω—É—Ç—å –Ω–µ –º–æ–≥—É—Ç.`);
        }
    });

    scene.withTransition((state) => {
        if (isTaleEnd(state)) {
            return RepkaScene.TaleEnd;
        }

        return RepkaScene.Call–°haracter;
    });

    function isTaleEnd({ lastCalledChar }: RepkaState) {
        return intents.mouse(lastCalledChar);
    }
}
